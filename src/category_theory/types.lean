-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Stephen Morgan, Scott Morrison, Johannes Hรถlzl

import category_theory.functor_category
import category_theory.fully_faithful

namespace category_theory

universes v v' w u u' -- declare the `v`'s first; see `category_theory.category` for an explanation

instance types : large_category (Sort u) :=
{ hom     := ฮป a b, (a โ b),
  id      := ฮป a, id,
  comp    := ฮป _ _ _ f g, g โ f }

@[simp] lemma types_hom {ฮฑ ฮฒ : Sort u} : (ฮฑ โถ ฮฒ) = (ฮฑ โ ฮฒ) := rfl
@[simp] lemma types_id {ฮฑ : Sort u} (a : ฮฑ) : (๐ ฮฑ : ฮฑ โ ฮฑ) a = a := rfl
@[simp] lemma types_comp {ฮฑ ฮฒ ฮณ : Sort u} (f : ฮฑ โ ฮฒ) (g : ฮฒ โ ฮณ) (a : ฮฑ) : (((f : ฮฑ โถ ฮฒ) โซ (g : ฮฒ โถ ฮณ)) : ฮฑ โถ ฮณ) a = g (f a) := rfl

namespace functor_to_types
variables {C : Sort u} [๐ : category.{v} C] (F G H : C โฅค Sort w) {X Y Z : C}
include ๐
variables (ฯ : F โถ G) (ฯ : G โถ H)

@[simp] lemma map_comp (f : X โถ Y) (g : Y โถ Z) (a : F.obj X) : (F.map (f โซ g)) a = (F.map g) ((F.map f) a) :=
by simp

@[simp] lemma map_id (a : F.obj X) : (F.map (๐ X)) a = a :=
by simp

lemma naturality (f : X โถ Y) (x : F.obj X) : ฯ.app Y ((F.map f) x) = (G.map f) (ฯ.app X x) :=
congr_fun (ฯ.naturality f) x

@[simp] lemma comp (x : F.obj X) : (ฯ โซ ฯ).app X x = ฯ.app X (ฯ.app X x) := rfl

variables {D : Sort u'} [๐ : category.{u'} D] (I J : D โฅค C) (ฯ : I โถ J) {W : D}

@[simp] lemma hcomp (x : (I โ F).obj W) : (ฯ โซ ฯ).app W x = (G.map (ฯ.app W)) (ฯ.app (I.obj W) x) := rfl

end functor_to_types

def ulift_trivial (V : Type u) : ulift.{u} V โ V := by tidy

def ulift_functor : Type u โฅค Type (max u v) :=
{ obj := ฮป X, ulift.{v} X,
  map := ฮป X Y f, ฮป x : ulift.{v} X, ulift.up (f x.down) }

@[simp] lemma ulift_functor.map {X Y : Type u} (f : X โถ Y) (x : ulift.{v} X) :
  ulift_functor.map f x = ulift.up (f x.down) := rfl

instance ulift_functor_faithful : fully_faithful ulift_functor :=
{ preimage := ฮป X Y f x, (f (ulift.up x)).down,
  injectivity' := ฮป X Y f g p, funext $ ฮป x,
    congr_arg ulift.down ((congr_fun p (ulift.up x)) : ((ulift.up (f x)) = (ulift.up (g x)))) }

end category_theory

-- Isomorphisms in Type and equivalences.

namespace equiv

universe u

variables {X Y : Sort u}

def to_iso (e : X โ Y) : X โ Y :=
{ hom := e.to_fun,
  inv := e.inv_fun,
  hom_inv_id' := funext e.left_inv,
  inv_hom_id' := funext e.right_inv }

@[simp] lemma to_iso_hom {e : X โ Y} : e.to_iso.hom = e := rfl
@[simp] lemma to_iso_inv {e : X โ Y} : e.to_iso.inv = e.symm := rfl

end equiv

namespace category_theory.iso

universe u

variables {X Y : Sort u}

def to_equiv (i : X โ Y) : X โ Y :=
{ to_fun := i.hom,
  inv_fun := i.inv,
  left_inv := ฮป x, congr_fun i.hom_inv_id x,
  right_inv := ฮป y, congr_fun i.inv_hom_id y }

@[simp] lemma to_equiv_fun (i : X โ Y) : (i.to_equiv : X โ Y) = i.hom := rfl
@[simp] lemma to_equiv_symm_fun (i : X โ Y) : (i.to_equiv.symm : Y โ X) = i.inv := rfl

end category_theory.iso
