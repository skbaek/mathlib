-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Stephen Morgan, Scott Morrison

import category_theory.products
import category_theory.types
import category_theory.natural_isomorphism

namespace category_theory

universes vโ vโ uโ uโ -- declare the `v`'s first; see `category_theory.category` for an explanation

/-- The type of objects of the opposite of C (which should be a category).

  In order to avoid confusion between C and its opposite category, we
  set up the type of objects `opposite C` using the following pattern,
  which will be repeated later for the morphisms.

  1. Define `opposite C := C`.
  2. Define the isomorphisms `op : C โ opposite C`, `unop : opposite C โ C`.
  3. Make the definition `opposite` irreducible.

  This has the following consequences.

  * `opposite C` and `C` are distinct types in the elaborator, so you
    must use `op` and `unop` explicitly to convert between them.
  * Both `unop (op X) = X` and `op (unop X) = X` are definitional
    equalities. Notably, every object of the opposite category is
    definitionally of the form `op X`, which greatly simplifies the
    definition of the structure of the opposite category, for example.

  (If Lean supported definitional eta equality for records, we could
  achieve the same goals using a structure with one field.)
-/
def opposite (C : Sort uโ) : Sort uโ := C

-- Use a high right binding power (like that of postfix โปยน) so that, for example,
-- `presheaf Cแตแต` parses as `presheaf (Cแตแต)` and not `(presheaf C)แตแต`.
notation C `แตแต`:std.prec.max_plus := opposite C

variables {C : Sort uโ}

def op (X : C) : Cแตแต := X
def unop (X : Cแตแต) : C := X

attribute [irreducible] opposite

@[simp] lemma unop_op (X : C) : unop (op X) = X := rfl
@[simp] lemma op_unop (X : Cแตแต) : op (unop X) = X := rfl

lemma op_inj : function.injective (@op C) :=
by { rintros _ _ โจ โฉ, refl }
lemma unop_inj : function.injective (@unop C) :=
by { rintros _ _ โจ โฉ, refl }

section has_hom

variables [๐ : has_hom.{vโ} C]
include ๐

/-- The hom types of the opposite of a category (or graph).

  As with the objects, we'll make this irreducible below.
  Use `f.op` and `f.unop` to convert between morphisms of C
  and morphisms of Cแตแต.
-/
instance has_hom.opposite : has_hom Cแตแต :=
{ hom := ฮป X Y, unop Y โถ unop X }

def has_hom.hom.op {X Y : C} (f : X โถ Y) : op Y โถ op X := f
def has_hom.hom.unop {X Y : Cแตแต} (f : X โถ Y) : unop Y โถ unop X := f

attribute [irreducible] has_hom.opposite

lemma has_hom.hom.op_inj {X Y : C} :
  function.injective (has_hom.hom.op : (X โถ Y) โ (op Y โถ op X)) :=
ฮป _ _ H, congr_arg has_hom.hom.unop H

lemma has_hom.hom.unop_inj {X Y : Cแตแต} :
  function.injective (has_hom.hom.unop : (X โถ Y) โ (unop Y โถ unop X)) :=
ฮป _ _ H, congr_arg has_hom.hom.op H

@[simp] lemma has_hom.hom.unop_op {X Y : C} {f : X โถ Y} : f.op.unop = f := rfl
@[simp] lemma has_hom.hom.op_unop {X Y : Cแตแต} {f : X โถ Y} : f.unop.op = f := rfl

end has_hom

variables [๐ : category.{vโ} C]
include ๐

instance category.opposite : category.{vโ} Cแตแต :=
{ comp := ฮป _ _ _ f g, (g.unop โซ f.unop).op,
  id   := ฮป X, (๐ (unop X)).op }

@[simp] lemma op_comp {X Y Z : C} {f : X โถ Y} {g : Y โถ Z} :
  (f โซ g).op = g.op โซ f.op := rfl
@[simp] lemma op_id {X : C} : (๐ X).op = ๐ (op X) := rfl

@[simp] lemma unop_comp {X Y Z : Cแตแต} {f : X โถ Y} {g : Y โถ Z} :
  (f โซ g).unop = g.unop โซ f.unop := rfl
@[simp] lemma unop_id {X : Cแตแต} : (๐ X).unop = ๐ (unop X) := rfl
@[simp] lemma unop_id_op {X : C} : (๐ (op X)).unop = ๐ X := rfl
@[simp] lemma op_id_unop {X : Cแตแต} : (๐ (unop X)).op = ๐ X := rfl

def op_op : (Cแตแต)แตแต โฅค C :=
{ obj := ฮป X, unop (unop X),
  map := ฮป X Y f, f.unop.unop }

-- TODO this is an equivalence

namespace functor

section

variables {D : Sort uโ} [๐ : category.{vโ} D]
include ๐

variables {C D}

protected definition op (F : C โฅค D) : Cแตแต โฅค Dแตแต :=
{ obj := ฮป X, op (F.obj (unop X)),
  map := ฮป X Y f, (F.map f.unop).op }

@[simp] lemma op_obj (F : C โฅค D) (X : Cแตแต) : (F.op).obj X = op (F.obj (unop X)) := rfl
@[simp] lemma op_map (F : C โฅค D) {X Y : Cแตแต} (f : X โถ Y) : (F.op).map f = (F.map f.unop).op := rfl

protected definition unop (F : Cแตแต โฅค Dแตแต) : C โฅค D :=
{ obj := ฮป X, unop (F.obj (op X)),
  map := ฮป X Y f, (F.map f.op).unop }

@[simp] lemma unop_obj (F : Cแตแต โฅค Dแตแต) (X : C) : (F.unop).obj X = unop (F.obj (op X)) := rfl
@[simp] lemma unop_map (F : Cแตแต โฅค Dแตแต) {X Y : C} (f : X โถ Y) : (F.unop).map f = (F.map f.op).unop := rfl

variables (C D)

definition op_hom : (C โฅค D)แตแต โฅค (Cแตแต โฅค Dแตแต) :=
{ obj := ฮป F, (unop F).op,
  map := ฮป F G ฮฑ,
  { app := ฮป X, (ฮฑ.unop.app (unop X)).op,
    naturality' := ฮป X Y f, has_hom.hom.unop_inj $ eq.symm (ฮฑ.unop.naturality f.unop) } }

@[simp] lemma op_hom.obj (F : (C โฅค D)แตแต) : (op_hom C D).obj F = (unop F).op := rfl
@[simp] lemma op_hom.map_app {F G : (C โฅค D)แตแต} (ฮฑ : F โถ G) (X : Cแตแต) :
  ((op_hom C D).map ฮฑ).app X = (ฮฑ.unop.app (unop X)).op := rfl

definition op_inv : (Cแตแต โฅค Dแตแต) โฅค (C โฅค D)แตแต :=
{ obj := ฮป F, op F.unop,
  map := ฮป F G ฮฑ, has_hom.hom.op
  { app := ฮป X, (ฮฑ.app (op X)).unop,
    naturality' := ฮป X Y f, has_hom.hom.op_inj $ eq.symm (ฮฑ.naturality f.op) } }

@[simp] lemma op_inv.obj (F : Cแตแต โฅค Dแตแต) : (op_inv C D).obj F = op F.unop := rfl
@[simp] lemma op_inv.map_app {F G : Cแตแต โฅค Dแตแต} (ฮฑ : F โถ G) (X : C) :
  (((op_inv C D).map ฮฑ).unop).app X = (ฮฑ.app (op X)).unop := rfl

-- TODO show these form an equivalence

instance {F : C โฅค D} [full F] : full F.op :=
{ preimage := ฮป X Y f, (F.preimage f.unop).op }

instance {F : C โฅค D} [faithful F] : faithful F.op :=
{ injectivity' := ฮป X Y f g h,
    has_hom.hom.unop_inj $ by simpa using injectivity F (has_hom.hom.op_inj h) }

end

section

omit ๐
variables (E : Type uโ) [โฐ : category.{vโ+1} E]
include โฐ

/-- `functor.hom` is the hom-pairing, sending (X,Y) to X โ Y, contravariant in X and covariant in Y. -/
definition hom : Eแตแต ร E โฅค Type vโ :=
{ obj       := ฮป p, unop p.1 โถ p.2,
  map       := ฮป X Y f, ฮป h, f.1.unop โซ h โซ f.2 }

@[simp] lemma hom_obj (X : Eแตแต ร E) : (functor.hom E).obj X = (unop X.1 โถ X.2) := rfl
@[simp] lemma hom_pairing_map {X Y : Eแตแต ร E} (f : X โถ Y) :
  (functor.hom E).map f = ฮป h, f.1.unop โซ h โซ f.2 := rfl

end

end functor

-- TODO the following definitions do not belong here

omit ๐
variables (E : Type uโ)

instance opposite.has_one [has_one E] : has_one (Eแตแต) :=
{ one := op 1 }

instance opposite.has_mul [has_mul E] : has_mul (Eแตแต) :=
{ mul := ฮป x y, op $ unop y * unop  x }

@[simp] lemma opposite.unop_one [has_one E] : unop (1 : Eแตแต) = (1 : E) := rfl

@[simp] lemma opposite.unop_mul [has_mul E] (xs ys : Eแตแต) : unop (xs * ys) = (unop ys * unop xs : E) := rfl

@[simp] lemma opposite.op_one [has_one E] : op (1 : E) = 1 := rfl

@[simp] lemma opposite.op_mul [has_mul E] (xs ys : E) : op (xs * ys) = (op ys * op xs) := rfl

instance opposite.monoid [monoid E] : monoid (Eแตแต) :=
{ one := op 1,
  mul := ฮป x y, op $ unop y * unop  x,
  mul_one := by { intros, apply unop_inj, simp },
  one_mul := by { intros, simp },
  mul_assoc := by { intros, simp [mul_assoc], } }

end category_theory
