-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Tim Baumann, Stephen Morgan, Scott Morrison

import category_theory.natural_transformation

namespace category_theory

universes v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ -- declare the `v`'s first; see `category_theory.category` for an explanation

open nat_trans

variables (C : Sort u‚ÇÅ) [ùíû : category.{v‚ÇÅ} C] (D : Sort u‚ÇÇ) [ùíü : category.{v‚ÇÇ} D]
include ùíû ùíü

/--
`functor.category C D` gives the category structure on functors and natural transformations
between categories `C` and `D`.

Notice that if `C` and `D` are both small categories at the same universe level,
this is another small category at that level.
However if `C` and `D` are both large categories at the same universe level,
this is a small category at the next higher level.
-/
instance functor.category : category.{(max u‚ÇÅ v‚ÇÇ 1)} (C ‚•§ D) :=
{ hom     := Œª F G, nat_trans F G,
  id      := Œª F, nat_trans.id F,
  comp    := Œª _ _ _ Œ± Œ≤, vcomp Œ± Œ≤ }

variables {C D} {E : Sort u‚ÇÉ} [‚Ñ∞ : category.{v‚ÇÉ} E]

namespace functor.category

section

@[simp] lemma id_app (F : C ‚•§ D) (X : C) : (ùüô F : F ‚ü∂ F).app X = ùüô (F.obj X) := rfl
@[simp] lemma comp_app {F G H : C ‚•§ D} (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H) (X : C) :
  (Œ± ‚â´ Œ≤).app X = Œ±.app X ‚â´ Œ≤.app X := rfl

end

namespace nat_trans
-- This section gives two lemmas about natural transformations
-- between functors into functor categories,
-- spelling them out in components.

include ‚Ñ∞

lemma app_naturality {F G : C ‚•§ (D ‚•§ E)} (T : F ‚ü∂ G) (X : C) {Y Z : D} (f : Y ‚ü∂ Z) :
  ((F.obj X).map f) ‚â´ ((T.app X).app Z) = ((T.app X).app Y) ‚â´ ((G.obj X).map f) :=
(T.app X).naturality f

lemma naturality_app {F G : C ‚•§ (D ‚•§ E)} (T : F ‚ü∂ G) (Z : D) {X Y : C} (f : X ‚ü∂ Y) :
  ((F.map f).app Z) ‚â´ ((T.app Y).app Z) = ((T.app X).app Z) ‚â´ ((G.map f).app Z) :=
congr_fun (congr_arg app (T.naturality f)) Z

end nat_trans

end functor.category

namespace functor

include ‚Ñ∞

protected def flip (F : C ‚•§ (D ‚•§ E)) : D ‚•§ (C ‚•§ E) :=
{ obj := Œª k,
  { obj := Œª j, (F.obj j).obj k,
    map := Œª j j' f, (F.map f).app k,
    map_id' := Œª X, begin rw category_theory.functor.map_id, refl end,
    map_comp' := Œª X Y Z f g, by rw [functor.map_comp, ‚Üêfunctor.category.comp_app] },
  map := Œª c c' f,
  { app := Œª j, (F.obj j).map f,
    naturality' := Œª X Y g, by dsimp; rw ‚Üênat_trans.naturality } }.

@[simp] lemma flip_obj_map (F : C ‚•§ (D ‚•§ E)) {c c' : C} (f : c ‚ü∂ c') (d : D) :
  ((F.flip).obj d).map f = (F.map f).app d := rfl

end functor

end category_theory
