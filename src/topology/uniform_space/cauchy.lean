/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Mario Carneiro

Theory of Cauchy filters in uniform spaces. Complete uniform spaces. Totally bounded subsets.
-/
import topology.uniform_space.basic


open filter topological_space lattice set classical
local attribute [instance, priority 0] prop_decidable
variables {Œ± : Type*} {Œ≤ : Type*} [uniform_space Œ±]
universe u

local notation `ùì§` := uniformity

/-- A filter `f` is Cauchy if for every entourage `r`, there exists an
  `s ‚àà f` such that `s √ó s ‚äÜ r`. This is a generalization of Cauchy
  sequences, because if `a : ‚Ñï ‚Üí Œ±` then the filter of sets containing
  cofinitely many of the `a n` is Cauchy iff `a` is a Cauchy sequence. -/
def cauchy (f : filter Œ±) := f ‚â† ‚ä• ‚àß filter.prod f f ‚â§ (ùì§ Œ±)

def is_complete (s : set Œ±) := ‚àÄf, cauchy f ‚Üí f ‚â§ principal s ‚Üí ‚àÉx‚ààs, f ‚â§ nhds x

lemma cauchy_iff {f : filter Œ±} :
  cauchy f ‚Üî (f ‚â† ‚ä• ‚àß (‚àÄ s ‚àà ùì§ Œ±, ‚àÉt‚ààf.sets, set.prod t t ‚äÜ s)) :=
and_congr (iff.refl _) $ forall_congr $ assume s, forall_congr $ assume hs, mem_prod_same_iff

lemma cauchy_map_iff {l : filter Œ≤} {f : Œ≤ ‚Üí Œ±} :
  cauchy (l.map f) ‚Üî (l ‚â† ‚ä• ‚àß tendsto (Œªp:Œ≤√óŒ≤, (f p.1, f p.2)) (l.prod l) (ùì§ Œ±)) :=
by rw [cauchy, (‚â†), map_eq_bot_iff, prod_map_map_eq]; refl

lemma cauchy_downwards {f g : filter Œ±} (h_c : cauchy f) (hg : g ‚â† ‚ä•) (h_le : g ‚â§ f) : cauchy g :=
‚ü®hg, le_trans (filter.prod_mono h_le h_le) h_c.right‚ü©

lemma cauchy_nhds {a : Œ±} : cauchy (nhds a) :=
‚ü®nhds_neq_bot,
  calc filter.prod (nhds a) (nhds a) =
    (ùì§ Œ±).lift (Œªs:set (Œ±√óŒ±), (ùì§ Œ±).lift' (Œªt:set(Œ±√óŒ±),
      set.prod {y : Œ± | (y, a) ‚àà s} {y : Œ± | (a, y) ‚àà t})) : nhds_nhds_eq_uniformity_uniformity_prod
    ... ‚â§ (ùì§ Œ±).lift' (Œªs:set (Œ±√óŒ±), comp_rel s s) :
      le_infi $ assume s, le_infi $ assume hs,
      infi_le_of_le s $ infi_le_of_le hs $ infi_le_of_le s $ infi_le_of_le hs $
      principal_mono.mpr $
      assume ‚ü®x, y‚ü© ‚ü®(hx : (x, a) ‚àà s), (hy : (a, y) ‚àà s)‚ü©, ‚ü®a, hx, hy‚ü©
    ... ‚â§ ùì§ Œ± : comp_le_uniformity‚ü©

lemma cauchy_pure {a : Œ±} : cauchy (pure a) :=
cauchy_downwards cauchy_nhds
  (show principal {a} ‚â† ‚ä•, by simp)
  (pure_le_nhds a)

lemma le_nhds_of_cauchy_adhp {f : filter Œ±} {x : Œ±} (hf : cauchy f)
  (adhs : f ‚äì nhds x ‚â† ‚ä•) : f ‚â§ nhds x :=
have ‚àÄs‚ààf.sets, x ‚àà closure s,
begin
  intros s hs,
  simp [closure_eq_nhds, inf_comm],
  exact assume h', adhs $ bot_unique $ h' ‚ñ∏ inf_le_inf (by simp; exact hs) (le_refl _)
end,
calc f ‚â§ f.lift' (Œªs:set Œ±, {y | x ‚àà closure s ‚àß y ‚àà closure s}) :
    le_infi $ assume s, le_infi $ assume hs,
    begin
      rw [‚Üêforall_sets_neq_empty_iff_neq_bot] at adhs,
      simp [this s hs],
      exact mem_sets_of_superset hs subset_closure
    end
  ... ‚â§ f.lift' (Œªs:set Œ±, {y | (x, y) ‚àà closure (set.prod s s)}) :
    by simp [closure_prod_eq]; exact le_refl _
  ... = (filter.prod f f).lift' (Œªs:set (Œ±√óŒ±), {y | (x, y) ‚àà closure s}) :
  begin
    rw [prod_same_eq],
    rw [lift'_lift'_assoc],
    exact monotone_prod monotone_id monotone_id,
    exact monotone_comp (assume s t h x h', closure_mono h h') monotone_preimage
  end
  ... ‚â§ (ùì§ Œ±).lift' (Œªs:set (Œ±√óŒ±), {y | (x, y) ‚àà closure s}) : lift'_mono hf.right (le_refl _)
  ... = ((ùì§ Œ±).lift' closure).lift' (Œªs:set (Œ±√óŒ±), {y | (x, y) ‚àà s}) :
  begin
    rw [lift'_lift'_assoc],
    exact assume s t h, closure_mono h,
    exact monotone_preimage
  end
  ... = (ùì§ Œ±).lift' (Œªs:set (Œ±√óŒ±), {y | (x, y) ‚àà s}) :
    by rw [‚Üêuniformity_eq_uniformity_closure]
  ... = nhds x :
    by rw [nhds_eq_uniformity]

lemma le_nhds_iff_adhp_of_cauchy {f : filter Œ±} {x : Œ±} (hf : cauchy f) :
  f ‚â§ nhds x ‚Üî f ‚äì nhds x ‚â† ‚ä• :=
‚ü®assume h, (inf_of_le_left h).symm ‚ñ∏ hf.left,
le_nhds_of_cauchy_adhp hf‚ü©

lemma cauchy_map [uniform_space Œ≤] {f : filter Œ±} {m : Œ± ‚Üí Œ≤}
  (hm : uniform_continuous m) (hf : cauchy f) : cauchy (map m f) :=
‚ü®have f ‚â† ‚ä•, from hf.left, by simp; assumption,
  calc filter.prod (map m f) (map m f) =
          map (Œªp:Œ±√óŒ±, (m p.1, m p.2)) (filter.prod f f) : filter.prod_map_map_eq
    ... ‚â§ map (Œªp:Œ±√óŒ±, (m p.1, m p.2)) (ùì§ Œ±) : map_mono hf.right
    ... ‚â§ ùì§ Œ≤ : hm‚ü©

lemma cauchy_comap [uniform_space Œ≤] {f : filter Œ≤} {m : Œ± ‚Üí Œ≤}
  (hm : comap (Œªp:Œ±√óŒ±, (m p.1, m p.2)) (ùì§ Œ≤) ‚â§ ùì§ Œ±)
  (hf : cauchy f) (hb : comap m f ‚â† ‚ä•) : cauchy (comap m f) :=
‚ü®hb,
  calc filter.prod (comap m f) (comap m f) =
          comap (Œªp:Œ±√óŒ±, (m p.1, m p.2)) (filter.prod f f) : filter.prod_comap_comap_eq
    ... ‚â§ comap (Œªp:Œ±√óŒ±, (m p.1, m p.2)) (ùì§ Œ≤) : comap_mono hf.right
    ... ‚â§ ùì§ Œ± : hm‚ü©

/-- Cauchy sequences. Usually defined on ‚Ñï, but often it is also useful to say that a function
defined on ‚Ñù is Cauchy at +‚àû to deduce convergence. Therefore, we define it in a type class that
is general enough to cover both ‚Ñï and ‚Ñù, which are the main motivating examples. -/
def cauchy_seq [inhabited Œ≤] [semilattice_sup Œ≤] (u : Œ≤ ‚Üí Œ±) := cauchy (at_top.map u)

lemma cauchy_seq_iff_prod_map [inhabited Œ≤] [semilattice_sup Œ≤] {u : Œ≤ ‚Üí Œ±} :
  cauchy_seq u ‚Üî map (prod.map u u) at_top ‚â§ ùì§ Œ± :=
iff.trans (and_iff_right (map_ne_bot at_top_ne_bot)) (prod_map_at_top_eq u u ‚ñ∏ iff.rfl)

/-- A complete space is defined here using uniformities. A uniform space
  is complete if every Cauchy filter converges. -/
class complete_space (Œ± : Type u) [uniform_space Œ±] : Prop :=
(complete : ‚àÄ{f:filter Œ±}, cauchy f ‚Üí ‚àÉx, f ‚â§ nhds x)

lemma complete_univ {Œ± : Type u} [uniform_space Œ±] [complete_space Œ±] :
  is_complete (univ : set Œ±) :=
begin
  assume f hf _,
  rcases complete_space.complete hf with ‚ü®x, hx‚ü©,
  exact ‚ü®x, by simp, hx‚ü©
end

lemma cauchy_prod [uniform_space Œ≤] {f : filter Œ±} {g : filter Œ≤} :
  cauchy f ‚Üí cauchy g ‚Üí cauchy (filter.prod f g)
| ‚ü®f_proper, hf‚ü© ‚ü®g_proper, hg‚ü© := ‚ü®filter.prod_neq_bot.2 ‚ü®f_proper, g_proper‚ü©,
  let p_Œ± := Œªp:(Œ±√óŒ≤)√ó(Œ±√óŒ≤), (p.1.1, p.2.1), p_Œ≤ := Œªp:(Œ±√óŒ≤)√ó(Œ±√óŒ≤), (p.1.2, p.2.2) in
  suffices (f.prod f).comap p_Œ± ‚äì (g.prod g).comap p_Œ≤ ‚â§ (ùì§ Œ±).comap p_Œ± ‚äì (ùì§ Œ≤).comap p_Œ≤,
    by simpa [uniformity_prod, filter.prod, filter.comap_inf, filter.comap_comap_comp, (‚àò),
        lattice.inf_assoc, lattice.inf_comm, lattice.inf_left_comm],
  lattice.inf_le_inf (filter.comap_mono hf) (filter.comap_mono hg)‚ü©

instance complete_space.prod [uniform_space Œ≤] [complete_space Œ±] [complete_space Œ≤] :
  complete_space (Œ± √ó Œ≤) :=
{ complete := Œª f hf,
    let ‚ü®x1, hx1‚ü© := complete_space.complete $ cauchy_map uniform_continuous_fst hf in
    let ‚ü®x2, hx2‚ü© := complete_space.complete $ cauchy_map uniform_continuous_snd hf in
    ‚ü®(x1, x2), by rw [nhds_prod_eq, filter.prod_def];
      from filter.le_lift (Œª s hs, filter.le_lift' $ Œª t ht,
        have H1 : prod.fst ‚Åª¬π' s ‚àà f.sets := hx1 hs,
        have H2 : prod.snd ‚Åª¬π' t ‚àà f.sets := hx2 ht,
        filter.inter_mem_sets H1 H2)‚ü© }

/--If `univ` is complete, the space is a complete space -/
lemma complete_space_of_is_complete_univ (h : is_complete (univ : set Œ±)) : complete_space Œ± :=
‚ü®Œª f hf, let ‚ü®x, _, hx‚ü© := h f hf ((@principal_univ Œ±).symm ‚ñ∏ le_top) in ‚ü®x, hx‚ü©‚ü©

lemma cauchy_iff_exists_le_nhds [uniform_space Œ±] [complete_space Œ±] {l : filter Œ±} (hl : l ‚â† ‚ä•) :
  cauchy l ‚Üî (‚àÉx, l ‚â§ nhds x) :=
‚ü®complete_space.complete, assume ‚ü®x, hx‚ü©, cauchy_downwards cauchy_nhds hl hx‚ü©

lemma cauchy_map_iff_exists_tendsto [uniform_space Œ±] [complete_space Œ±] {l : filter Œ≤} {f : Œ≤ ‚Üí Œ±}
  (hl : l ‚â† ‚ä•) : cauchy (l.map f) ‚Üî (‚àÉx, tendsto f l (nhds x)) :=
cauchy_iff_exists_le_nhds (map_ne_bot hl)

/-- A Cauchy sequence in a complete space converges -/
theorem cauchy_seq_tendsto_of_complete [inhabited Œ≤] [semilattice_sup Œ≤] [complete_space Œ±]
  {u : Œ≤ ‚Üí Œ±} (H : cauchy_seq u) : ‚àÉx, tendsto u at_top (nhds x) :=
complete_space.complete H

theorem le_nhds_lim_of_cauchy {Œ±} [uniform_space Œ±] [complete_space Œ±]
  [inhabited Œ±] {f : filter Œ±} (hf : cauchy f) : f ‚â§ nhds (lim f) :=
lim_spec (complete_space.complete hf)

lemma is_complete_of_is_closed [complete_space Œ±] {s : set Œ±}
  (h : is_closed s) : is_complete s :=
Œª f cf fs, let ‚ü®x, hx‚ü© := complete_space.complete cf in
‚ü®x, is_closed_iff_nhds.mp h x (neq_bot_of_le_neq_bot cf.left (le_inf hx fs)), hx‚ü©

/-- A set `s` is totally bounded if for every entourage `d` there is a finite
  set of points `t` such that every element of `s` is `d`-near to some element of `t`. -/
def totally_bounded (s : set Œ±) : Prop :=
‚àÄd ‚àà ùì§ Œ±, ‚àÉt : set Œ±, finite t ‚àß s ‚äÜ (‚ãÉy‚ààt, {x | (x,y) ‚àà d})

theorem totally_bounded_iff_subset {s : set Œ±} : totally_bounded s ‚Üî
  ‚àÄd ‚àà ùì§ Œ±, ‚àÉt ‚äÜ s, finite t ‚àß s ‚äÜ (‚ãÉy‚ààt, {x | (x,y) ‚àà d}) :=
‚ü®Œª H d hd, begin
  rcases comp_symm_of_uniformity hd with ‚ü®r, hr, rs, rd‚ü©,
  rcases H r hr with ‚ü®k, fk, ks‚ü©,
  let u := {y ‚àà k | ‚àÉ x, x ‚àà s ‚àß (x, y) ‚àà r},
  let f : u ‚Üí Œ± := Œª x, classical.some x.2.2,
  have : ‚àÄ x : u, f x ‚àà s ‚àß (f x, x.1) ‚àà r := Œª x, classical.some_spec x.2.2,
  refine ‚ü®range f, _, _, _‚ü©,
  { exact range_subset_iff.2 (Œª x, (this x).1) },
  { have : finite u := finite_subset fk (Œª x h, h.1),
    exact ‚ü®@set.fintype_range _ _ _ _ this.fintype‚ü© },
  { intros x xs,
    have := ks xs, simp at this,
    rcases this with ‚ü®y, hy, xy‚ü©,
    let z : coe_sort u := ‚ü®y, hy, x, xs, xy‚ü©,
    exact mem_bUnion_iff.2 ‚ü®_, ‚ü®z, rfl‚ü©, rd $ mem_comp_rel.2 ‚ü®_, xy, rs (this z).2‚ü©‚ü© }
end,
Œª H d hd, let ‚ü®t, _, ht‚ü© := H d hd in ‚ü®t, ht‚ü©‚ü©

lemma totally_bounded_subset [uniform_space Œ±] {s‚ÇÅ s‚ÇÇ : set Œ±} (hs : s‚ÇÅ ‚äÜ s‚ÇÇ)
  (h : totally_bounded s‚ÇÇ) : totally_bounded s‚ÇÅ :=
assume d hd, let ‚ü®t, ht‚ÇÅ, ht‚ÇÇ‚ü© := h d hd in ‚ü®t, ht‚ÇÅ, subset.trans hs ht‚ÇÇ‚ü©

lemma totally_bounded_empty [uniform_space Œ±] : totally_bounded (‚àÖ : set Œ±) :=
Œª d hd, ‚ü®‚àÖ, finite_empty, empty_subset _‚ü©

lemma totally_bounded_closure [uniform_space Œ±] {s : set Œ±} (h : totally_bounded s) :
  totally_bounded (closure s) :=
assume t ht,
let ‚ü®t', ht', hct', htt'‚ü© := mem_uniformity_is_closed ht, ‚ü®c, hcf, hc‚ü© := h t' ht' in
‚ü®c, hcf,
  calc closure s ‚äÜ closure (‚ãÉ (y : Œ±) (H : y ‚àà c), {x : Œ± | (x, y) ‚àà t'}) : closure_mono hc
    ... = _ : closure_eq_of_is_closed $ is_closed_Union hcf $ assume i hi,
      continuous_iff_is_closed.mp (continuous_id.prod_mk continuous_const) _ hct'
    ... ‚äÜ _ : bUnion_subset $ assume i hi, subset.trans (assume x, @htt' (x, i))
      (subset_bUnion_of_mem hi)‚ü©

lemma totally_bounded_image [uniform_space Œ±] [uniform_space Œ≤] {f : Œ± ‚Üí Œ≤} {s : set Œ±}
  (hf : uniform_continuous f) (hs : totally_bounded s) : totally_bounded (f '' s) :=
assume t ht,
have {p:Œ±√óŒ± | (f p.1, f p.2) ‚àà t} ‚àà ùì§ Œ±,
  from hf ht,
let ‚ü®c, hfc, hct‚ü© := hs _ this in
‚ü®f '' c, finite_image f hfc,
  begin
    simp [image_subset_iff],
    simp [subset_def] at hct,
    intros x hx, simp [-mem_image],
    exact let ‚ü®i, hi, ht‚ü© := hct x hx in ‚ü®f i, mem_image_of_mem f hi, ht‚ü©
  end‚ü©

lemma cauchy_of_totally_bounded_of_ultrafilter {s : set Œ±} {f : filter Œ±}
  (hs : totally_bounded s) (hf : is_ultrafilter f) (h : f ‚â§ principal s) : cauchy f :=
‚ü®hf.left, assume t ht,
  let ‚ü®t', ht'‚ÇÅ, ht'_symm, ht'_t‚ü© := comp_symm_of_uniformity ht in
  let ‚ü®i, hi, hs_union‚ü© := hs t' ht'‚ÇÅ in
  have (‚ãÉy‚àài, {x | (x,y) ‚àà t'}) ‚àà f.sets,
    from mem_sets_of_superset (le_principal_iff.mp h) hs_union,
  have ‚àÉy‚àài, {x | (x,y) ‚àà t'} ‚àà f.sets,
    from mem_of_finite_Union_ultrafilter hf hi this,
  let ‚ü®y, hy, hif‚ü© := this in
  have set.prod {x | (x,y) ‚àà t'} {x | (x,y) ‚àà t'} ‚äÜ comp_rel t' t',
    from assume ‚ü®x‚ÇÅ, x‚ÇÇ‚ü© ‚ü®(h‚ÇÅ : (x‚ÇÅ, y) ‚àà t'), (h‚ÇÇ : (x‚ÇÇ, y) ‚àà t')‚ü©,
      ‚ü®y, h‚ÇÅ, ht'_symm h‚ÇÇ‚ü©,
  (filter.prod f f).sets_of_superset (prod_mem_prod hif hif) (subset.trans this ht'_t)‚ü©

lemma totally_bounded_iff_filter {s : set Œ±} :
  totally_bounded s ‚Üî (‚àÄf, f ‚â† ‚ä• ‚Üí f ‚â§ principal s ‚Üí ‚àÉc ‚â§ f, cauchy c) :=
‚ü®assume : totally_bounded s, assume f hf hs,
  ‚ü®ultrafilter_of f, ultrafilter_of_le,
    cauchy_of_totally_bounded_of_ultrafilter this
      (ultrafilter_ultrafilter_of hf) (le_trans ultrafilter_of_le hs)‚ü©,

  assume h : ‚àÄf, f ‚â† ‚ä• ‚Üí f ‚â§ principal s ‚Üí ‚àÉc ‚â§ f, cauchy c, assume d hd,
  classical.by_contradiction $ assume hs,
  have hd_cover : ‚àÄ{t:set Œ±}, finite t ‚Üí ¬¨ s ‚äÜ (‚ãÉy‚ààt, {x | (x,y) ‚àà d}),
    by simpa using hs,
  let
    f := ‚®Öt:{t : set Œ± // finite t}, principal (s \ (‚ãÉy‚ààt.val, {x | (x,y) ‚àà d})),
    ‚ü®a, ha‚ü© := @exists_mem_of_ne_empty Œ± s
      (assume h, hd_cover finite_empty $ h.symm ‚ñ∏ empty_subset _)
  in
  have f ‚â† ‚ä•,
    from infi_neq_bot_of_directed ‚ü®a‚ü©
      (assume ‚ü®t‚ÇÅ, ht‚ÇÅ‚ü© ‚ü®t‚ÇÇ, ht‚ÇÇ‚ü©, ‚ü®‚ü®t‚ÇÅ ‚à™ t‚ÇÇ, finite_union ht‚ÇÅ ht‚ÇÇ‚ü©,
        principal_mono.mpr $ diff_subset_diff_right $ Union_subset_Union $
          assume t, Union_subset_Union_const or.inl,
        principal_mono.mpr $ diff_subset_diff_right $ Union_subset_Union $
          assume t, Union_subset_Union_const or.inr‚ü©)
      (assume ‚ü®t, ht‚ü©, by simp [diff_eq_empty]; exact hd_cover ht),
  have f ‚â§ principal s, from infi_le_of_le ‚ü®‚àÖ, finite_empty‚ü© $ by simp; exact subset.refl s,
  let
    ‚ü®c, (hc‚ÇÅ : c ‚â§ f), (hc‚ÇÇ : cauchy c)‚ü© := h f ‚Äπf ‚â† ‚ä•‚Ä∫ this,
    ‚ü®m, hm, (hmd : set.prod m m ‚äÜ d)‚ü© := (@mem_prod_same_iff Œ± c d).mp $ hc‚ÇÇ.right hd
  in
  have c ‚â§ principal s, from le_trans ‚Äπc ‚â§ f‚Ä∫ this,
  have m ‚à© s ‚àà c.sets, from inter_mem_sets hm $ le_principal_iff.mp this,
  let ‚ü®y, hym, hys‚ü© := inhabited_of_mem_sets hc‚ÇÇ.left this in
  let ys := (‚ãÉy'‚àà({y}:set Œ±), {x | (x, y') ‚àà d}) in
  have m ‚äÜ ys,
    from assume y' hy',
      show  y' ‚àà (‚ãÉy'‚àà({y}:set Œ±), {x | (x, y') ‚àà d}),
        by simp; exact @hmd (y', y) ‚ü®hy', hym‚ü©,
  have c ‚â§ principal (s - ys),
    from le_trans hc‚ÇÅ $ infi_le_of_le ‚ü®{y}, finite_singleton _‚ü© $ le_refl _,
  have (s - ys) ‚à© (m ‚à© s) ‚àà c.sets,
    from inter_mem_sets (le_principal_iff.mp this) ‚Äπm ‚à© s ‚àà c.sets‚Ä∫,
  have ‚àÖ ‚àà c.sets,
    from c.sets_of_superset this $ assume x ‚ü®‚ü®hxs, hxys‚ü©, hxm, _‚ü©, hxys $ ‚Äπm ‚äÜ ys‚Ä∫ hxm,
  hc‚ÇÇ.left $ empty_in_sets_eq_bot.mp this‚ü©

lemma totally_bounded_iff_ultrafilter {s : set Œ±} :
  totally_bounded s ‚Üî (‚àÄf, is_ultrafilter f ‚Üí f ‚â§ principal s ‚Üí cauchy f) :=
‚ü®assume hs f, cauchy_of_totally_bounded_of_ultrafilter hs,
  assume h, totally_bounded_iff_filter.mpr $ assume f hf hfs,
  have cauchy (ultrafilter_of f),
    from h (ultrafilter_of f) (ultrafilter_ultrafilter_of hf) (le_trans ultrafilter_of_le hfs),
  ‚ü®ultrafilter_of f, ultrafilter_of_le, this‚ü©‚ü©

lemma compact_iff_totally_bounded_complete {s : set Œ±} :
  compact s ‚Üî totally_bounded s ‚àß is_complete s :=
‚ü®Œª hs, ‚ü®totally_bounded_iff_ultrafilter.2 (Œª f hf1 hf2,
    let ‚ü®x, xs, fx‚ü© := compact_iff_ultrafilter_le_nhds.1 hs f hf1 hf2 in
    cauchy_downwards (cauchy_nhds) (hf1.1) fx),
  Œª f fc fs,
    let ‚ü®a, as, fa‚ü© := hs f fc.1 fs in
    ‚ü®a, as, le_nhds_of_cauchy_adhp fc fa‚ü©‚ü©,
Œª ‚ü®ht, hc‚ü©, compact_iff_ultrafilter_le_nhds.2
  (Œªf hf hfs, hc _ (totally_bounded_iff_ultrafilter.1 ht _ hf hfs) hfs)‚ü©

instance complete_of_compact {Œ± : Type u} [uniform_space Œ±] [compact_space Œ±] : complete_space Œ± :=
‚ü®Œªf hf, by simpa [principal_univ] using (compact_iff_totally_bounded_complete.1 compact_univ).2 f hf‚ü©

lemma compact_of_totally_bounded_is_closed [complete_space Œ±] {s : set Œ±}
  (ht : totally_bounded s) (hc : is_closed s) : compact s :=
(@compact_iff_totally_bounded_complete Œ± _ s).2 ‚ü®ht, is_complete_of_is_closed hc‚ü©
