/-
Copyright (c) 2018 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot, Johannes H√∂lzl

Uniform structure on topological groups:

* `topological_add_group.to_uniform_space` and `topological_add_group_is_uniform` can be used to
  construct a canonical uniformity for a topological add group.

* extension of ‚Ñ§-bilinear maps to complete groups (useful for ring completions)

* `add_group_with_zero_nhd`: construct the topological structure from a group with a neighbourhood
  around zero. Then with `topological_add_group.to_uniform_space` one can derive a `uniform_space`.
-/
import topology.uniform_space.uniform_embedding topology.uniform_space.separation topology.algebra.group

noncomputable theory
local attribute [instance, priority 0] classical.prop_decidable

local notation `ùì§` := uniformity

section uniform_add_group
open filter set

variables {Œ± : Type*} {Œ≤ : Type*}

/-- A uniform (additive) group is a group in which the addition and negation are
  uniformly continuous. -/
class uniform_add_group (Œ± : Type*) [uniform_space Œ±] [add_group Œ±] : Prop :=
(uniform_continuous_sub : uniform_continuous (Œªp:Œ±√óŒ±, p.1 - p.2))

theorem uniform_add_group.mk' {Œ±} [uniform_space Œ±] [add_group Œ±]
  (h‚ÇÅ : uniform_continuous (Œªp:Œ±√óŒ±, p.1 + p.2))
  (h‚ÇÇ : uniform_continuous (Œªp:Œ±, -p)) : uniform_add_group Œ± :=
‚ü®(uniform_continuous_fst.prod_mk (uniform_continuous_snd.comp h‚ÇÇ)).comp h‚ÇÅ‚ü©

variables [uniform_space Œ±] [add_group Œ±] [uniform_add_group Œ±]

lemma uniform_continuous_sub' : uniform_continuous (Œªp:Œ±√óŒ±, p.1 - p.2) :=
uniform_add_group.uniform_continuous_sub Œ±

lemma uniform_continuous_sub [uniform_space Œ≤] {f : Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±}
  (hf : uniform_continuous f) (hg : uniform_continuous g) : uniform_continuous (Œªx, f x - g x) :=
(hf.prod_mk hg).comp uniform_continuous_sub'

lemma uniform_continuous_neg [uniform_space Œ≤] {f : Œ≤ ‚Üí Œ±}
  (hf : uniform_continuous f) : uniform_continuous (Œªx, - f x) :=
have uniform_continuous (Œªx, 0 - f x),
  from uniform_continuous_sub uniform_continuous_const hf,
by simp * at *

lemma uniform_continuous_neg' : uniform_continuous (Œªx:Œ±, - x) :=
uniform_continuous_neg uniform_continuous_id

lemma uniform_continuous_add [uniform_space Œ≤] {f : Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±}
  (hf : uniform_continuous f) (hg : uniform_continuous g) : uniform_continuous (Œªx, f x + g x) :=
have uniform_continuous (Œªx, f x - - g x),
  from uniform_continuous_sub hf $ uniform_continuous_neg hg,
by simp * at *

lemma uniform_continuous_add' : uniform_continuous (Œªp:Œ±√óŒ±, p.1 + p.2) :=
uniform_continuous_add uniform_continuous_fst uniform_continuous_snd

instance uniform_add_group.to_topological_add_group : topological_add_group Œ± :=
{ continuous_add := uniform_continuous_add'.continuous,
  continuous_neg := uniform_continuous_neg'.continuous }

instance [uniform_space Œ≤] [add_group Œ≤] [uniform_add_group Œ≤] : uniform_add_group (Œ± √ó Œ≤) :=
‚ü®uniform_continuous.prod_mk
  (uniform_continuous_sub
    (uniform_continuous_fst.comp uniform_continuous_fst)
    (uniform_continuous_snd.comp uniform_continuous_fst))
  (uniform_continuous_sub
    (uniform_continuous_fst.comp uniform_continuous_snd)
    (uniform_continuous_snd.comp uniform_continuous_snd)) ‚ü©

lemma uniformity_translate (a : Œ±) : (ùì§ Œ±).map (Œªx:Œ±√óŒ±, (x.1 + a, x.2 + a)) = ùì§ Œ± :=
le_antisymm
  (uniform_continuous_add uniform_continuous_id uniform_continuous_const)
  (calc ùì§ Œ± =
    ((ùì§ Œ±).map (Œªx:Œ±√óŒ±, (x.1 + -a, x.2 + -a))).map (Œªx:Œ±√óŒ±, (x.1 + a, x.2 + a)) :
      by simp [filter.map_map, (‚àò)]; exact filter.map_id.symm
    ... ‚â§ (ùì§ Œ±).map (Œªx:Œ±√óŒ±, (x.1 + a, x.2 + a)) :
      filter.map_mono (uniform_continuous_add uniform_continuous_id uniform_continuous_const))

lemma uniform_embedding_translate (a : Œ±) : uniform_embedding (Œªx:Œ±, x + a) :=
begin
  refine ‚ü®assume x y, eq_of_add_eq_add_right, _‚ü©,
  rw [‚Üê uniformity_translate a, comap_map] {occs := occurrences.pos [1]},
  rintros ‚ü®p‚ÇÅ, p‚ÇÇ‚ü© ‚ü®q‚ÇÅ, q‚ÇÇ‚ü©,
  simp [prod.eq_iff_fst_eq_snd_eq] {contextual := tt}
end

section
variables (Œ±)
lemma uniformity_eq_comap_nhds_zero : ùì§ Œ± = comap (Œªx:Œ±√óŒ±, x.2 - x.1) (nhds (0:Œ±)) :=
begin
  rw [nhds_eq_comap_uniformity, filter.comap_comap_comp],
  refine le_antisymm (filter.map_le_iff_le_comap.1 _) _,
  { assume s hs,
    rcases mem_uniformity_of_uniform_continuous_invarant uniform_continuous_sub' hs with ‚ü®t, ht, hts‚ü©,
    refine mem_map.2 (mem_sets_of_superset ht _),
    rintros ‚ü®a, b‚ü©,
    simpa [subset_def] using hts a b a },
  { assume s hs,
    rcases mem_uniformity_of_uniform_continuous_invarant uniform_continuous_add' hs with ‚ü®t, ht, hts‚ü©,
    refine ‚ü®_, ht, _‚ü©,
    rintros ‚ü®a, b‚ü©, simpa [subset_def] using hts 0 (b - a) a }
end
end

lemma group_separation_rel (x y : Œ±) : (x, y) ‚àà separation_rel Œ± ‚Üî x - y ‚àà closure ({0} : set Œ±) :=
have embedding (Œªa, a + (y - x)), from (uniform_embedding_translate (y - x)).embedding,
show (x, y) ‚àà ‚ãÇ‚ÇÄ (ùì§ Œ±).sets ‚Üî x - y ‚àà closure ({0} : set Œ±),
begin
  rw [this.closure_eq_preimage_closure_image, uniformity_eq_comap_nhds_zero Œ±, sInter_comap_sets],
  simp [mem_closure_iff_nhds, inter_singleton_eq_empty]
end

lemma uniform_continuous_of_tendsto_zero [uniform_space Œ≤] [add_group Œ≤] [uniform_add_group Œ≤]
  {f : Œ± ‚Üí Œ≤} [is_add_group_hom f] (h : tendsto f (nhds 0) (nhds 0)) :
  uniform_continuous f :=
begin
  have : ((Œªx:Œ≤√óŒ≤, x.2 - x.1) ‚àò (Œªx:Œ±√óŒ±, (f x.1, f x.2))) = (Œªx:Œ±√óŒ±, f (x.2 - x.1)),
  { simp only [is_add_group_hom.map_sub f] },
  rw [uniform_continuous, uniformity_eq_comap_nhds_zero Œ±, uniformity_eq_comap_nhds_zero Œ≤,
    tendsto_comap_iff, this],
  exact tendsto.comp tendsto_comap h
end

lemma uniform_continuous_of_continuous [uniform_space Œ≤] [add_group Œ≤] [uniform_add_group Œ≤]
  {f : Œ± ‚Üí Œ≤} [is_add_group_hom f] (h : continuous f) :
  uniform_continuous f :=
uniform_continuous_of_tendsto_zero $
  suffices tendsto f (nhds 0) (nhds (f 0)), by rwa [is_add_group_hom.map_zero f] at this,
  h.tendsto 0

end uniform_add_group

section topological_add_comm_group
universes u v w x
open filter

variables {G : Type u} [add_comm_group G] [topological_space G] [topological_add_group G]

variable (G)
def topological_add_group.to_uniform_space : uniform_space G :=
{ uniformity          := comap (Œªp:G√óG, p.2 - p.1) (nhds 0),
  refl                :=
    by refine map_le_iff_le_comap.1 (le_trans _ (pure_le_nhds 0));
      simp [set.subset_def] {contextual := tt},
  symm                :=
  begin
    suffices : tendsto ((Œªp, -p) ‚àò (Œªp:G√óG, p.2 - p.1)) (comap (Œªp:G√óG, p.2 - p.1) (nhds 0)) (nhds (-0)),
    { simpa [(‚àò), tendsto_comap_iff] },
    exact tendsto.comp tendsto_comap (tendsto_neg tendsto_id)
  end,
  comp                :=
  begin
    intros D H,
    rw mem_lift'_sets,
    { rcases H with ‚ü®U, U_nhds, U_sub‚ü©,
      rcases exists_nhds_half U_nhds with ‚ü®V, ‚ü®V_nhds, V_sum‚ü©‚ü©,
      existsi ((Œªp:G√óG, p.2 - p.1) ‚Åª¬π' V),
      have H : (Œªp:G√óG, p.2 - p.1) ‚Åª¬π' V ‚àà comap (Œªp:G√óG, p.2 - p.1) (nhds (0 : G)),
        by existsi [V, V_nhds] ; refl,
      existsi H,
      have comp_rel_sub : comp_rel ((Œªp:G√óG, p.2 - p.1) ‚Åª¬π' V) ((Œªp:G√óG, p.2 - p.1) ‚Åª¬π' V) ‚äÜ (Œªp:G√óG, p.2 - p.1) ‚Åª¬π' U,
      begin
        intros p p_comp_rel,
        rcases p_comp_rel with ‚ü®z, ‚ü®Hz1, Hz2‚ü©‚ü©,
        simpa using V_sum _ _ Hz1 Hz2
      end,
      exact set.subset.trans comp_rel_sub U_sub },
    { exact monotone_comp_rel monotone_id monotone_id }
  end,
  is_open_uniformity  :=
  begin
    intro S,
    let S' := Œª x, {p : G √ó G | p.1 = x ‚Üí p.2 ‚àà S},
    show is_open S ‚Üî ‚àÄ (x : G), x ‚àà S ‚Üí S' x ‚àà comap (Œªp:G√óG, p.2 - p.1) (nhds (0 : G)),
    rw [is_open_iff_mem_nhds],
    refine forall_congr (assume a, forall_congr (assume ha, _)),
    rw [‚Üê nhds_translation a, mem_comap_sets, mem_comap_sets],
    refine exists_congr (assume t, exists_congr (assume ht, _)),
    show (Œª (y : G), y - a) ‚Åª¬π' t ‚äÜ S ‚Üî (Œª (p : G √ó G), p.snd - p.fst) ‚Åª¬π' t ‚äÜ S' a,
    split,
    { rintros h ‚ü®x, y‚ü© hx rfl, exact h hx },
    { rintros h x hx, exact @h (a, x) hx rfl }
  end }

section
local attribute [instance] topological_add_group.to_uniform_space

lemma uniformity_eq_comap_nhds_zero' : ùì§ G = comap (Œªp:G√óG, p.2 - p.1) (nhds (0 : G)) := rfl

variable {G}
lemma topological_add_group_is_uniform : uniform_add_group G :=
have tendsto
    ((Œªp:(G√óG), p.1 - p.2) ‚àò (Œªp:(G√óG)√ó(G√óG), (p.1.2 - p.1.1, p.2.2 - p.2.1)))
    (comap (Œªp:(G√óG)√ó(G√óG), (p.1.2 - p.1.1, p.2.2 - p.2.1)) ((nhds 0).prod (nhds 0)))
    (nhds (0 - 0)) :=
  tendsto_comap.comp (tendsto_sub tendsto_fst tendsto_snd),
begin
  constructor,
  rw [uniform_continuous, uniformity_prod_eq_prod, tendsto_map'_iff,
    uniformity_eq_comap_nhds_zero' G, tendsto_comap_iff, prod_comap_comap_eq],
  simpa [(‚àò)]
end
end

lemma to_uniform_space_eq {Œ± : Type*} [u : uniform_space Œ±] [add_comm_group Œ±] [uniform_add_group Œ±]:
  topological_add_group.to_uniform_space Œ± = u :=
begin
  ext : 1,
  show @uniformity Œ± (topological_add_group.to_uniform_space Œ±) = ùì§ Œ±,
  rw [uniformity_eq_comap_nhds_zero' Œ±, uniformity_eq_comap_nhds_zero Œ±]
end

end topological_add_comm_group

namespace add_comm_group
section Z_bilin

variables {Œ± : Type*} {Œ≤ : Type*} {Œ≥ : Type*} {Œ¥ : Type*}
variables [add_comm_group Œ±] [add_comm_group Œ≤] [add_comm_group Œ≥]

/- TODO: when modules are changed to have more explicit base ring, then change replace `is_Z_bilin`
by using `is_bilinear_map ‚Ñ§` from `tensor_product`. -/
class is_Z_bilin (f : Œ± √ó Œ≤ ‚Üí Œ≥) : Prop :=
(add_left  : ‚àÄ a a' b, f (a + a', b) = f (a, b) + f (a', b))
(add_right : ‚àÄ a b b', f (a, b + b') = f (a, b) + f (a, b'))

variables (f : Œ± √ó Œ≤ ‚Üí Œ≥) [is_Z_bilin f]

instance is_Z_bilin.comp_hom {g : Œ≥ ‚Üí Œ¥} [add_comm_group Œ¥] [is_add_group_hom g] :
  is_Z_bilin (g ‚àò f) :=
by constructor; simp [(‚àò), is_Z_bilin.add_left f, is_Z_bilin.add_right f, is_add_group_hom.map_add g]

instance is_Z_bilin.comp_swap : is_Z_bilin (f ‚àò prod.swap) :=
‚ü®Œª a a' b, is_Z_bilin.add_right f b a a',
 Œª a b b', is_Z_bilin.add_left f b b' a‚ü©

lemma is_Z_bilin.zero_left : ‚àÄ b, f (0, b) = 0 :=
begin
  intro b,
  apply add_self_iff_eq_zero.1,
  rw ‚Üêis_Z_bilin.add_left f,
  simp
end

lemma is_Z_bilin.zero_right : ‚àÄ a, f (a, 0) = 0 :=
is_Z_bilin.zero_left (f ‚àò prod.swap)

lemma is_Z_bilin.zero : f (0, 0) = 0 :=
is_Z_bilin.zero_left f 0

lemma is_Z_bilin.neg_left  : ‚àÄ a b, f (-a, b) = -f (a, b) :=
begin
  intros a b,
  apply eq_of_sub_eq_zero,
  rw [sub_eq_add_neg, neg_neg, ‚Üêis_Z_bilin.add_left f, neg_add_self, is_Z_bilin.zero_left f]
end

lemma is_Z_bilin.neg_right  : ‚àÄ a b, f (a, -b) = -f (a, b) :=
assume a b, is_Z_bilin.neg_left (f ‚àò prod.swap) b a

lemma is_Z_bilin.sub_left : ‚àÄ a a' b, f (a - a', b) = f (a, b) - f (a', b) :=
begin
  intros,
  dsimp [algebra.sub],
  rw [is_Z_bilin.add_left f, is_Z_bilin.neg_left f]
end

lemma is_Z_bilin.sub_right : ‚àÄ a b b', f (a, b - b') = f (a, b) - f (a,b') :=
assume a b b', is_Z_bilin.sub_left (f ‚àò prod.swap) b b' a
end Z_bilin
end add_comm_group

open add_comm_group filter set function

section
variables {Œ± : Type*} {Œ≤ : Type*} {Œ≥ : Type*} {Œ¥ : Type*}

-- Œ±, Œ≤ and G are abelian topological groups, G is complete Hausdorff
variables [topological_space Œ±] [add_comm_group Œ±] [topological_add_group Œ±]
variables [topological_space Œ≤] [add_comm_group Œ≤] [topological_add_group Œ≤]
variables {G : Type*} [uniform_space G] [add_comm_group G] [uniform_add_group G]
  [complete_space G] [separated G]

variables {œà : Œ± √ó Œ≤ ‚Üí G} (hœà : continuous œà) [œàbilin : is_Z_bilin œà]

include hœà œàbilin

lemma is_Z_bilin.tendsto_zero_left (x‚ÇÅ : Œ±) : tendsto œà (nhds (x‚ÇÅ, 0)) (nhds 0) :=
begin
  have := continuous.tendsto hœà (x‚ÇÅ, 0),
  rwa [is_Z_bilin.zero_right œà] at this
end

lemma is_Z_bilin.tendsto_zero_right (y‚ÇÅ : Œ≤) : tendsto œà (nhds (0, y‚ÇÅ)) (nhds 0) :=
begin
  have := continuous.tendsto hœà (0, y‚ÇÅ),
  rwa [is_Z_bilin.zero_left œà] at this
end
end

section
variables {Œ± : Type*} {Œ≤ : Type*}
variables [topological_space Œ±] [add_comm_group Œ±] [topological_add_group Œ±]

-- Œ≤ is a dense subgroup of Œ±, inclusion is denoted by e
variables [topological_space Œ≤] [add_comm_group Œ≤] [topological_add_group Œ≤]
variables {e : Œ≤ ‚Üí Œ±} [is_add_group_hom e] (de : dense_embedding e)
include de

lemma tendsto_sub_comap_self (x‚ÇÄ : Œ±) :
  tendsto (Œªt:Œ≤√óŒ≤, t.2 - t.1) (comap (Œªp:Œ≤√óŒ≤, (e p.1, e p.2)) $ nhds (x‚ÇÄ, x‚ÇÄ)) (nhds 0) :=
begin
  have comm : (Œªx:Œ±√óŒ±, x.2-x.1) ‚àò (Œªt:Œ≤√óŒ≤, (e t.1, e t.2)) = e ‚àò (Œªt:Œ≤√óŒ≤, t.2 - t.1),
  { ext t,
    change e t.2 - e t.1 = e (t.2 - t.1),
    rwa ‚Üê is_add_group_hom.map_sub e t.2 t.1 },
  have lim : tendsto (Œª x : Œ± √ó Œ±, x.2-x.1) (nhds (x‚ÇÄ, x‚ÇÄ)) (nhds (e 0)),
    { have := continuous.tendsto (continuous.comp continuous_swap continuous_sub') (x‚ÇÄ, x‚ÇÄ),
      simpa [-sub_eq_add_neg, sub_self, eq.symm (is_add_group_hom.map_zero e)] using this },
  have := de.tendsto_comap_nhds_nhds lim comm,
  simp [-sub_eq_add_neg, this]
end
end

namespace dense_embedding
open filter
variables {Œ± : Type*} [topological_space Œ±]
variables {Œ≤ : Type*} [topological_space Œ≤]
variables {Œ≥ : Type*} [uniform_space Œ≥] [complete_space Œ≥] [separated Œ≥]

lemma continuous_extend_of_cauchy {e : Œ± ‚Üí Œ≤} {f : Œ± ‚Üí Œ≥}
  (de : dense_embedding e) (h : ‚àÄ b : Œ≤, cauchy (map f (comap e $ nhds b))) :
  continuous (de.extend f) :=
continuous_extend de $ Œª b, complete_space.complete (h b)

end dense_embedding

namespace dense_embedding
variables {Œ± : Type*} {Œ≤ : Type*} {Œ≥ : Type*} {Œ¥ : Type*}
variables {G : Type*}

-- Œ≤ is a dense subgroup of Œ±, inclusion is denoted by e
-- Œ¥ is a dense subgroup of Œ≥, inclusion is denoted by f
variables [topological_space Œ±] [add_comm_group Œ±] [topological_add_group Œ±]
variables [topological_space Œ≤] [add_comm_group Œ≤] [topological_add_group Œ≤]
variables [topological_space Œ≥] [add_comm_group Œ≥] [topological_add_group Œ≥]
variables [topological_space Œ¥] [add_comm_group Œ¥] [topological_add_group Œ¥]
variables [uniform_space G] [add_comm_group G] [uniform_add_group G] [separated G] [complete_space G]
variables {e : Œ≤ ‚Üí Œ±} [is_add_group_hom e] (de : dense_embedding e)
variables {f : Œ¥ ‚Üí Œ≥} [is_add_group_hom f] (df : dense_embedding f)
variables {œÜ : Œ≤ √ó Œ¥ ‚Üí G} (hœÜ : continuous œÜ) [bilin : is_Z_bilin œÜ]

include de df hœÜ bilin

variables {W' : set G} (W'_nhd : W' ‚àà nhds (0 : G))
include W'_nhd

private lemma extend_Z_bilin_aux (x‚ÇÄ : Œ±) (y‚ÇÅ : Œ¥) :
  ‚àÉ U‚ÇÇ ‚àà comap e (nhds x‚ÇÄ), ‚àÄ x x' ‚àà U‚ÇÇ, œÜ (x' - x, y‚ÇÅ) ‚àà W' :=
begin
  let Nx := nhds x‚ÇÄ,
  let ee := Œª u : Œ≤ √ó Œ≤, (e u.1, e u.2),

  have lim1 : tendsto (Œª a : Œ≤ √ó Œ≤, (a.2 - a.1, y‚ÇÅ)) (filter.prod (comap e Nx) (comap e Nx)) (nhds (0, y‚ÇÅ)),
  { have := tendsto.prod_mk (tendsto_sub_comap_self de x‚ÇÄ) (tendsto_const_nhds : tendsto (Œª (p : Œ≤ √ó Œ≤), y‚ÇÅ) (comap ee $ nhds (x‚ÇÄ, x‚ÇÄ)) (nhds y‚ÇÅ)),
    rw [nhds_prod_eq, prod_comap_comap_eq, ‚Üênhds_prod_eq],
    exact (this : _) },

  have lim := tendsto.comp lim1 (is_Z_bilin.tendsto_zero_right hœÜ y‚ÇÅ),
  rw tendsto_prod_self_iff at lim,
  exact lim W' W'_nhd,
end

private lemma extend_Z_bilin_key (x‚ÇÄ : Œ±) (y‚ÇÄ : Œ≥) :
  ‚àÉ U ‚àà comap e (nhds x‚ÇÄ), ‚àÉ V ‚àà comap f (nhds y‚ÇÄ),
    ‚àÄ x x' ‚àà U, ‚àÄ y y' ‚àà V, œÜ (x', y') - œÜ (x, y) ‚àà W' :=
begin
  let Nx := nhds x‚ÇÄ,
  let Ny := nhds y‚ÇÄ,
  let dp := dense_embedding.prod de df,
  let ee := Œª u : Œ≤ √ó Œ≤, (e u.1, e u.2),
  let ff := Œª u : Œ¥ √ó Œ¥, (f u.1, f u.2),

  have lim_œÜ : filter.tendsto œÜ (nhds (0, 0)) (nhds 0),
  { have := continuous.tendsto hœÜ (0, 0),
    rwa [is_Z_bilin.zero œÜ] at this },

  have lim_œÜ_sub_sub : tendsto (Œª (p : (Œ≤ √ó Œ≤) √ó (Œ¥ √ó Œ¥)), œÜ (p.1.2 - p.1.1, p.2.2 - p.2.1))
    (filter.prod (comap ee $ nhds (x‚ÇÄ, x‚ÇÄ)) (comap ff $ nhds (y‚ÇÄ, y‚ÇÄ))) (nhds 0),
  { have lim_sub_sub :  tendsto (Œª (p : (Œ≤ √ó Œ≤) √ó Œ¥ √ó Œ¥), (p.1.2 - p.1.1, p.2.2 - p.2.1))
      (filter.prod (comap ee (nhds (x‚ÇÄ, x‚ÇÄ))) (comap ff (nhds (y‚ÇÄ, y‚ÇÄ)))) (filter.prod (nhds 0) (nhds 0)),
    { have := filter.prod_mono (tendsto_sub_comap_self de x‚ÇÄ) (tendsto_sub_comap_self df y‚ÇÄ),
      rwa prod_map_map_eq at this },
    rw ‚Üê nhds_prod_eq at lim_sub_sub,
    exact tendsto.comp lim_sub_sub lim_œÜ },

  rcases exists_nhds_quarter W'_nhd with ‚ü®W, W_nhd, W4‚ü©,

  have : ‚àÉ U‚ÇÅ ‚àà comap e (nhds x‚ÇÄ), ‚àÉ V‚ÇÅ ‚àà comap f (nhds y‚ÇÄ),
    ‚àÄ x x' ‚àà U‚ÇÅ, ‚àÄ y y' ‚àà V‚ÇÅ,  œÜ (x'-x, y'-y) ‚àà W,
  { have := tendsto_prod_iff.1 lim_œÜ_sub_sub W W_nhd,
    repeat { rw [nhds_prod_eq, ‚Üêprod_comap_comap_eq] at this },
    rcases this with ‚ü®U, U_in, V, V_in, H‚ü©,
    rw [mem_prod_same_iff] at U_in V_in,
    rcases U_in with ‚ü®U‚ÇÅ, U‚ÇÅ_in, HU‚ÇÅ‚ü©,
    rcases V_in with ‚ü®V‚ÇÅ, V‚ÇÅ_in, HV‚ÇÅ‚ü©,
    existsi [U‚ÇÅ, U‚ÇÅ_in, V‚ÇÅ, V‚ÇÅ_in],
    intros x x' x_in x'_in y y' y_in y'_in,
    exact H _ _ (HU‚ÇÅ (mk_mem_prod x_in x'_in)) (HV‚ÇÅ (mk_mem_prod y_in y'_in)) },
  rcases this with ‚ü®U‚ÇÅ, U‚ÇÅ_nhd, V‚ÇÅ, V‚ÇÅ_nhd, H‚ü©,

  have : ‚àÉ x‚ÇÅ, x‚ÇÅ ‚àà U‚ÇÅ := exists_mem_of_ne_empty
    (forall_sets_neq_empty_iff_neq_bot.2 de.comap_nhds_neq_bot U‚ÇÅ U‚ÇÅ_nhd),
  rcases this with ‚ü®x‚ÇÅ, x‚ÇÅ_in‚ü©,

  have : ‚àÉ y‚ÇÅ, y‚ÇÅ ‚àà V‚ÇÅ := exists_mem_of_ne_empty
    (forall_sets_neq_empty_iff_neq_bot.2 df.comap_nhds_neq_bot V‚ÇÅ V‚ÇÅ_nhd),
  rcases this with ‚ü®y‚ÇÅ, y‚ÇÅ_in‚ü©,

  rcases (extend_Z_bilin_aux de df hœÜ W_nhd x‚ÇÄ y‚ÇÅ) with ‚ü®U‚ÇÇ, U‚ÇÇ_nhd, HU‚ü©,
  rcases (extend_Z_bilin_aux df de (continuous.comp continuous_swap hœÜ) W_nhd y‚ÇÄ x‚ÇÅ) with ‚ü®V‚ÇÇ, V‚ÇÇ_nhd, HV‚ü©,

  existsi [U‚ÇÅ ‚à© U‚ÇÇ, inter_mem_sets U‚ÇÅ_nhd U‚ÇÇ_nhd,
            V‚ÇÅ ‚à© V‚ÇÇ, inter_mem_sets V‚ÇÅ_nhd V‚ÇÇ_nhd],

  rintros x x' ‚ü®xU‚ÇÅ, xU‚ÇÇ‚ü© ‚ü®x'U‚ÇÅ, x'U‚ÇÇ‚ü© y y' ‚ü®yV‚ÇÅ, yV‚ÇÇ‚ü© ‚ü®y'V‚ÇÅ, y'V‚ÇÇ‚ü©,
  have key_formula : œÜ(x', y') - œÜ(x, y) = œÜ(x' - x, y‚ÇÅ) + œÜ(x' - x, y' - y‚ÇÅ) + œÜ(x‚ÇÅ, y' - y) + œÜ(x - x‚ÇÅ, y' - y),
  { repeat { rw is_Z_bilin.sub_left œÜ },
    repeat { rw is_Z_bilin.sub_right œÜ },
    apply eq_of_sub_eq_zero,
    simp },
  rw key_formula,
  have h‚ÇÅ := HU x x' xU‚ÇÇ x'U‚ÇÇ,
  have h‚ÇÇ := H x x' xU‚ÇÅ x'U‚ÇÅ y‚ÇÅ y' y‚ÇÅ_in y'V‚ÇÅ,
  have h‚ÇÉ := HV y y' yV‚ÇÇ y'V‚ÇÇ,
  have h‚ÇÑ := H x‚ÇÅ x x‚ÇÅ_in xU‚ÇÅ y y' yV‚ÇÅ y'V‚ÇÅ,

  exact W4 h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ
end
omit W'_nhd

/-- Bourbaki GT III.6.5 Theorem I:
‚Ñ§-bilinear continuous maps from dense sub-groups into a complete Hausdorff group extend by continuity.
Note: Bourbaki assumes that Œ± and Œ≤ are also complete Hausdorff, but this is not necessary. -/
theorem extend_Z_bilin  : continuous (extend (dense_embedding.prod de df) œÜ) :=
begin
  let dp := dense_embedding.prod de df,
  refine dense_embedding.continuous_extend_of_cauchy (dense_embedding.prod de df) _,
  rintro ‚ü®x‚ÇÄ, y‚ÇÄ‚ü©,
  split,
  { apply map_ne_bot,
    apply comap_neq_bot,

    intros U h,
    rcases exists_mem_of_ne_empty (mem_closure_iff_nhds.1 (dp.dense (x‚ÇÄ, y‚ÇÄ)) U h)
      with ‚ü®x, x_in, ‚ü®z, z_x‚ü©‚ü©,
    existsi z,
    cc },
  { suffices : map (Œª (p : (Œ≤ √ó Œ¥) √ó (Œ≤ √ó Œ¥)), œÜ p.2 - œÜ p.1)
      (comap (Œª (p : (Œ≤ √ó Œ¥) √ó Œ≤ √ó Œ¥), ((e p.1.1, f p.1.2), (e p.2.1, f p.2.2)))
         (filter.prod (nhds (x‚ÇÄ, y‚ÇÄ)) (nhds (x‚ÇÄ, y‚ÇÄ)))) ‚â§ nhds 0,
    by rwa [uniformity_eq_comap_nhds_zero G, prod_map_map_eq, ‚Üêmap_le_iff_le_comap, filter.map_map,
        prod_comap_comap_eq],

    intros W' W'_nhd,

    have key := extend_Z_bilin_key de df hœÜ W'_nhd x‚ÇÄ y‚ÇÄ,
    rcases key with ‚ü®U, U_nhd, V, V_nhd, h‚ü©,
    rw mem_comap_sets at U_nhd,
    rcases U_nhd with ‚ü®U', U'_nhd, U'_sub‚ü©,
    rw mem_comap_sets at V_nhd,
    rcases V_nhd with ‚ü®V', V'_nhd, V'_sub‚ü©,

    rw [mem_map, mem_comap_sets, nhds_prod_eq],
    existsi set.prod (set.prod U' V') (set.prod U' V'),
    rw mem_prod_same_iff,

    simp only [exists_prop],
    split,
    { change U' ‚àà nhds x‚ÇÄ at U'_nhd,
      change V' ‚àà nhds y‚ÇÄ at V'_nhd,
      have := prod_mem_prod U'_nhd V'_nhd,
      tauto },
    { intros p h',
      simp only [set.mem_preimage_eq, set.prod_mk_mem_set_prod_eq] at h',
      rcases p with ‚ü®‚ü®x, y‚ü©, ‚ü®x', y'‚ü©‚ü©,
      apply h ; tauto } }
end
end dense_embedding
